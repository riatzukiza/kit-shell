
(macro set-globals (...body)
       `(mixin (lit ...@body) global))
(include "kit/header")
(import-namespace kit)


(require! 'fs 'sibilant 'readline)

(include "kit-repl/header")
(import-namespace repl)


(.include sibilant "kit/header" )
(.include sibilant "kit-loader/index")
(.include sibilant (.resolve require "./meta"))
(.include sibilant "kit-interface/header")

(set module 'filename (pipe (process.cwd) ))

(when (.exists-sync fs "./.sibilant/meta.sibilant")
  (.include sibilant "./.sibilant/meta"))

(set-globals (sibilant (require 'sibilant))
             (R (require 'ramda))
             process
             module
             exports
             require
             create extend mixin conditional cond partially-apply-after
             )

(var rl-config (lit (input process.stdin)
                    (output process.stdout)
                    (prompt "#>")))

(let ((repl (.start ((create REPL))))
      (rl (.create-interface readline rl-config)))

  (.on rl 'line (#-> repl.send))

  (pipe repl
        (.on  'result (aprint "result:"))
        (.on 'result (#-> rl.prompt))
        (.on  'error (aprint "error:"))
        (.on  'log (aprint "log:")))

  (print "awaiting input")
  (.prompt rl))



