(meta

 (var modules (new Set))

 (macro add-to-module-lookup (path)
        `(let ( (p "/") (inc @ (or path (process.cwd))))
           (require! 'path)
           (assign module.paths
                   [...module.paths
                    ...(pipe
                        (.split inc path.sep)
                        (.map (=> (el)
                                  (var r (path.join p "node_modules"))
                                  (assign p (path.join p el))
                                  r))
                        (.filter (=> (e) (not (.includes module.paths e))))
                        )])
           null))

 (macro clear-source-cache (...paths)
        (.map paths (=> (p) (delete (get sibilant.source-cache p))))
        null)

 (def macros.unload (...paths)
   (pipe paths
         (.map (=> (p) [p (eval p.token)]))

         (.filter (=> ([p path]) (pipe path modules.has  )))

         (.map (=> ([p path])

                   (print "unloading" path)
                   (.delete modules path)
                   (clear-source-cache path)))))

 (def macros.reload (...paths)
   (.map paths (#-> (tap macros.unload)
                    macros.load)))

 (def macros.load (...paths)
   (pipe paths
         (.map (=> (p) [p (eval p.token)]))

         (.filter (=> ([p path]) (pipe path modules.has not )))

         (.map (=> ([p path])
                   (.add modules path)
                   (print "loading" path)
                   `(include @p))))))
